!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
AddListEqsCES	rfc.c	/^int AddListEqsCES(LISTEqS *ptrlistEqs,unsigned int *tbmp)$/;"	f
CES	rfc.h	/^typedef struct CES$/;"	s
CES	rfc.h	/^}CES;$/;"	t	typeref:struct:CES
CheckData	rfc.c	/^void CheckData()$/;"	f
CompareBmp	rfc.c	/^bool CompareBmp(unsigned int *abmp, unsigned int *bbmp)$/;"	f
CountMemory	rfc.c	/^void CountMemory()$/;"	f
ECFLAGS	Makefile	/^ECFLAGS = -g -O0  -I. -Werror$/;"	m
ELDFLAGS	Makefile	/^ELDFLAGS = -L $/;"	m
FALSE	rfc.h	10;"	d
FILTER	rfc.h	/^struct FILTER$/;"	s
FILTSET	rfc.h	/^struct FILTSET$/;"	s
FindOrder	rfc.c	/^void FindOrder()$/;"	f
FreeListEqs	rfc.c	/^void FreeListEqs(LISTEqS *ptrlistEqs)$/;"	f
GetRuleCost	rfc.c	/^unsigned int GetRuleCost(unsigned int *tbmp)$/;"	f
InitListEqs	rfc.c	/^void InitListEqs(LISTEqS *ptrlistEqs)$/;"	f
LDLIBS	Makefile	/^LDLIBS  =  -Wl$/;"	m
LENGTH	rfc.h	12;"	d
LISTEqS	rfc.h	/^typedef struct LISTEqS$/;"	s
LISTEqS	rfc.h	/^}LISTEqS;$/;"	t	typeref:struct:LISTEqS
LoadChunks	rfc.c	/^void LoadChunks()$/;"	f
LoadFilters	rfc.c	/^void LoadFilters(FILE *fp, FILTSET * filtset)$/;"	f
LoadPackages	rfc.c	/^void LoadPackages(FILE *fp, PACKAGESET * packageset)$/;"	f
Lookup	rfc.c	/^void Lookup()$/;"	f
MAXFILTERS	rfc.h	6;"	d
MAXPACKAGES	rfc.h	7;"	d
PACKAGE	rfc.h	/^struct PACKAGE$/;"	s
PACKAGESET	rfc.h	/^struct PACKAGESET$/;"	s
PNODE	rfc.h	/^typedef struct PNODE$/;"	s
PNODER	rfc.h	/^typedef struct PNODER$/;"	s
PROG	Makefile	/^PROG    = rfc$/;"	m
PackArr	rfc.h	/^    struct PACKAGE  PackArr[MAXPACKAGES];       \/\/ 存放网包的空间, 这里可以针对网包个数动态分配内存$/;"	m	struct:PACKAGESET	typeref:struct:PACKAGESET::PACKAGE
Pnode	rfc.h	/^}Pnode;$/;"	t	typeref:struct:PNODE
Pnoder	rfc.h	/^}Pnoder;$/;"	t	typeref:struct:PNODER
Preprocess	rfc.c	/^void Preprocess()$/;"	f
ReadFilter	rfc.c	/^int ReadFilter(FILE *fp, FILTSET * filtset,	unsigned int cost)$/;"	f
ReadFilterFile	rfc.c	/^void ReadFilterFile()$/;"	f
ReadIPRange	rfc.c	/^void ReadIPRange(FILE *fp,unsigned int* highRange,unsigned int* lowRange)$/;"	f
ReadPort	rfc.c	/^void ReadPort(FILE *fp, unsigned int *from, unsigned int *to)$/;"	f
ReadProtocol	rfc.c	/^void ReadProtocol(FILE *fp, unsigned char *from, unsigned char *to)$/;"	f
SIZE	rfc.h	13;"	d
SUCCESS	rfc.h	11;"	d
SaveChunks	rfc.c	/^void SaveChunks()$/;"	f
SearchBmp	rfc.c	/^int SearchBmp(LISTEqS *ptrlistEqs,unsigned int *tbmp)$/;"	f
SetBmpBit	rfc.c	/^void SetBmpBit(unsigned int *tbmp,unsigned int i, bool value)$/;"	f
SetPhase0_Cell	rfc.c	/^void SetPhase0_Cell()$/;"	f
SetPhase1_Cell	rfc.c	/^void SetPhase1_Cell()$/;"	f
SetPhase2_Cell	rfc.c	/^void SetPhase2_Cell()$/;"	f
TRUE	rfc.h	9;"	d
act	rfc.h	/^    unsigned char   act;                \/\/ 1 byte, 执行命令$/;"	m	struct:FILTER
cbm	rfc.h	/^    unsigned int  cbm[SIZE];            \/\/ LENGTH×SIZE bits, CBM$/;"	m	struct:CES
cell	rfc.h	/^    unsigned short *cell;               \/\/ dynamic alloc$/;"	m	struct:PNODER
cell	rfc.h	/^    unsigned short cell[65536];         \/\/ each cell stores an eqID$/;"	m	struct:PNODE
cost	rfc.h	/^    unsigned int    cost;               \/\/ 4 bytes, 规则的代价, 即规则在规则库中的正序号, 最多允许2^32条规则$/;"	m	struct:FILTER
dPort	rfc.h	/^    unsigned int    dPort;              \/\/ 2 bytes, 16位目标端口, 这里的16位数占用32位内存$/;"	m	struct:PACKAGE
dim	rfc.h	/^    unsigned int    dim[6];             \/\/ refer to all the dimension$/;"	m	struct:PACKAGE
dim	rfc.h	/^    unsigned int    dim[6][2];          \/\/ refer to the start & end of every dimension$/;"	m	struct:FILTER
dot	rfc.h	/^unsigned int dot[6];$/;"	v
eqID	rfc.h	/^    unsigned short eqID;                \/\/ 2 byte, eqID;$/;"	m	struct:CES
filtArr	rfc.h	/^    struct FILTER   filtArr[MAXFILTERS];    \/\/ 存放规则的空间, 这里可以针对规则个数动态分配内存$/;"	m	struct:FILTSET	typeref:struct:FILTSET::FILTER
filtset	rfc.h	/^}filtset;$/;"	v	typeref:struct:FILTSET
head	rfc.h	/^    CES *head;                          \/\/ head pointer of LISTEqS$/;"	m	struct:LISTEqS
highDIP	rfc.h	/^    unsigned int    highDIP[2];         \/\/ 2 bytes, dIP的高2字节$/;"	m	struct:PACKAGE
highSIP	rfc.h	/^    unsigned int    highSIP[2];         \/\/ 2 bytes, sIP的高2字节$/;"	m	struct:PACKAGE
listEqs	rfc.h	/^    LISTEqS listEqs;                    \/\/ list of Eqs$/;"	m	struct:PNODE
listEqs	rfc.h	/^    LISTEqS listEqs;$/;"	m	struct:PNODER
lookupResult	rfc.h	/^unsigned short *lookupResult;$/;"	v
lowDIP	rfc.h	/^    unsigned int    lowDIP[2];          \/\/ 2 bytes, dIP的低2字节$/;"	m	struct:PACKAGE
lowSIP	rfc.h	/^    unsigned int    lowSIP[2];          \/\/ 2 bytes, sIP的低2字节$/;"	m	struct:PACKAGE
main	rfc.c	/^int main(int argc, char* argv[])$/;"	f
nCES	rfc.h	/^    unsigned short nCES;                    \/\/ number of CES$/;"	m	struct:LISTEqS
ncells	rfc.h	/^    unsigned int ncells;$/;"	m	struct:PNODER
next	rfc.h	/^    CES *next;                          \/\/ next CES$/;"	m	struct:CES
numFilters	rfc.h	/^    unsigned int    numFilters;             \/\/ 规则总数$/;"	m	struct:FILTSET
numPackages	rfc.h	/^    unsigned int    numPackages;                \/\/ 网包总数$/;"	m	struct:PACKAGESET
packageset	rfc.h	/^}packageset;$/;"	v	typeref:struct:PACKAGESET
phase0_Nodes	rfc.h	/^Pnode phase0_Nodes[6];$/;"	v
phase1_Nodes	rfc.h	/^Pnoder phase1_Nodes[2];$/;"	v
phase2_Node	rfc.h	/^Pnoder phase2_Node;$/;"	v
rear	rfc.h	/^    CES *rear;                          \/\/ pointer to end node of LISTEqS$/;"	m	struct:LISTEqS
sPort	rfc.h	/^    unsigned int    sPort;              \/\/ 2 bytes, 16位源断口, 这里的16位数占用32位内存$/;"	m	struct:PACKAGE
