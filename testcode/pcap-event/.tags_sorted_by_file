!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
ECFLAGS	pcap-event-pipe-queue/Makefile	/^ECFLAGS = -g -O0   -I. #-Werror$/;"	m
LDLIBS	pcap-event-pipe-queue/Makefile	/^LDLIBS  =  -Wl  -lrt -lpcap -lpthread -levent$/;"	m
PROG	pcap-event-pipe-queue/Makefile	/^PROG    = pcap-libvent$/;"	m
capture_destory	pcap-event-pipe-queue/kstr_capture.c	/^void capture_destory(void)$/;"	f
capture_init	pcap-event-pipe-queue/kstr_capture.c	/^void capture_init(int nthreads)$/;"	f
get_packet_callback	pcap-event-pipe-queue/kstr_capture.c	/^void get_packet_callback(u_char * arg, const struct pcap_pkthdr * pkthdr, const u_char * packet)  $/;"	f
handle	pcap-event-pipe-queue/kstr_capture.c	/^static pcap_t* handle = NULL;$/;"	v	file:
nthreads	pcap-event-pipe-queue/kstr_capture.c	/^int nthreads = 2;$/;"	v
pkt_cap	pcap-event-pipe-queue/kstr_capture.c	/^void * pkt_cap( void *arg )$/;"	f
releaseNetCapture	pcap-event-pipe-queue/kstr_capture.c	/^void releaseNetCapture(void)$/;"	f
threads	pcap-event-pipe-queue/kstr_capture.c	/^event_thread_ctx_t  *   threads; $/;"	v
__YD_CAPTURE_H__	pcap-event-pipe-queue/kstr_capture.h	2;"	d
_GNU_SOURCE	pcap-event-pipe-queue/kstr_worker_thread.c	1;"	d	file:
create_worker	pcap-event-pipe-queue/kstr_worker_thread.c	/^static void create_worker(void *(*func)(void *), void *arg) {$/;"	f	file:
setup_thread	pcap-event-pipe-queue/kstr_worker_thread.c	/^static void setup_thread(event_thread_ctx_t *me) {$/;"	f	file:
thread_libevent_process	pcap-event-pipe-queue/kstr_worker_thread.c	/^static void thread_libevent_process(int fd, short which, void *arg) {$/;"	f	file:
transhex	pcap-event-pipe-queue/kstr_worker_thread.c	/^static void transhex( unsigned char* ucParam, int nlen)$/;"	f	file:
worker_func	pcap-event-pipe-queue/kstr_worker_thread.c	/^static void *worker_func(void *arg) {$/;"	f	file:
worker_thread_close	pcap-event-pipe-queue/kstr_worker_thread.c	/^void worker_thread_close( event_thread_ctx_t* ctx, int nthreads )$/;"	f
worker_thread_init	pcap-event-pipe-queue/kstr_worker_thread.c	/^event_thread_ctx_t* worker_thread_init(int nthreads) {$/;"	f
__WORKER_THREAD_	pcap-event-pipe-queue/kstr_worker_thread.h	2;"	d
base	pcap-event-pipe-queue/kstr_worker_thread.h	/^	struct event_base *base; \/\/every thread own event base$/;"	m	struct:__anon1	typeref:struct:__anon1::event_base
event_thread_ctx_t	pcap-event-pipe-queue/kstr_worker_thread.h	/^} event_thread_ctx_t;$/;"	t	typeref:struct:__anon1
idx	pcap-event-pipe-queue/kstr_worker_thread.h	/^	int idx ;$/;"	m	struct:__anon1
notify_event	pcap-event-pipe-queue/kstr_worker_thread.h	/^	struct event notify_event; \/\/notify event	$/;"	m	struct:__anon1	typeref:struct:__anon1::event
notify_receive_fd	pcap-event-pipe-queue/kstr_worker_thread.h	/^	int notify_receive_fd;\/\/ pipe recv$/;"	m	struct:__anon1
notify_send_fd	pcap-event-pipe-queue/kstr_worker_thread.h	/^	int notify_send_fd; \/\/pipe send $/;"	m	struct:__anon1
thread_id	pcap-event-pipe-queue/kstr_worker_thread.h	/^	pthread_t thread_id;$/;"	m	struct:__anon1
main	pcap-event-pipe-queue/main.c	/^int main(int argc, char* argv[])$/;"	f
__PUB_HEAD_H__	pcap-event-pipe-queue/pub_head.h	2;"	d
ECFLAGS	pcap-event-pipe/Makefile	/^ECFLAGS = -g -O0   -I. #-Werror$/;"	m
LDLIBS	pcap-event-pipe/Makefile	/^LDLIBS  =  -Wl  -lrt -lpcap -lpthread -levent$/;"	m
PROG	pcap-event-pipe/Makefile	/^PROG    = pcap-libvent$/;"	m
capture_destory	pcap-event-pipe/kstr_capture.c	/^void capture_destory(void)$/;"	f
capture_init	pcap-event-pipe/kstr_capture.c	/^void capture_init(int nthreads)$/;"	f
get_packet_callback	pcap-event-pipe/kstr_capture.c	/^void get_packet_callback(u_char * arg, const struct pcap_pkthdr * pkthdr, const u_char * packet)  $/;"	f
handle	pcap-event-pipe/kstr_capture.c	/^static pcap_t* handle = NULL;$/;"	v	file:
nthreads	pcap-event-pipe/kstr_capture.c	/^int nthreads = 2;$/;"	v
pkt_cap	pcap-event-pipe/kstr_capture.c	/^void * pkt_cap( void *arg )$/;"	f
releaseNetCapture	pcap-event-pipe/kstr_capture.c	/^void releaseNetCapture(void)$/;"	f
threads	pcap-event-pipe/kstr_capture.c	/^event_thread_ctx_t  *   threads; $/;"	v
__YD_CAPTURE_H__	pcap-event-pipe/kstr_capture.h	2;"	d
_GNU_SOURCE	pcap-event-pipe/kstr_worker_thread.c	1;"	d	file:
create_worker	pcap-event-pipe/kstr_worker_thread.c	/^static void create_worker(void *(*func)(void *), void *arg) {$/;"	f	file:
setup_thread	pcap-event-pipe/kstr_worker_thread.c	/^static void setup_thread(event_thread_ctx_t *me) {$/;"	f	file:
thread_libevent_process	pcap-event-pipe/kstr_worker_thread.c	/^static void thread_libevent_process(int fd, short which, void *arg) {$/;"	f	file:
transhex	pcap-event-pipe/kstr_worker_thread.c	/^static void transhex( unsigned char* ucParam, int nlen)$/;"	f	file:
worker_func	pcap-event-pipe/kstr_worker_thread.c	/^static void *worker_func(void *arg) {$/;"	f	file:
worker_thread_close	pcap-event-pipe/kstr_worker_thread.c	/^void worker_thread_close( event_thread_ctx_t* ctx, int nthreads )$/;"	f
worker_thread_init	pcap-event-pipe/kstr_worker_thread.c	/^event_thread_ctx_t* worker_thread_init(int nthreads) {$/;"	f
__WORKER_THREAD_	pcap-event-pipe/kstr_worker_thread.h	2;"	d
base	pcap-event-pipe/kstr_worker_thread.h	/^	struct event_base *base; \/\/every thread own event base$/;"	m	struct:__anon2	typeref:struct:__anon2::event_base
event_thread_ctx_t	pcap-event-pipe/kstr_worker_thread.h	/^} event_thread_ctx_t;$/;"	t	typeref:struct:__anon2
idx	pcap-event-pipe/kstr_worker_thread.h	/^	int idx ;$/;"	m	struct:__anon2
notify_event	pcap-event-pipe/kstr_worker_thread.h	/^	struct event notify_event; \/\/notify event	$/;"	m	struct:__anon2	typeref:struct:__anon2::event
notify_receive_fd	pcap-event-pipe/kstr_worker_thread.h	/^	int notify_receive_fd;\/\/ pipe recv$/;"	m	struct:__anon2
notify_send_fd	pcap-event-pipe/kstr_worker_thread.h	/^	int notify_send_fd; \/\/pipe send $/;"	m	struct:__anon2
thread_id	pcap-event-pipe/kstr_worker_thread.h	/^	pthread_t thread_id;$/;"	m	struct:__anon2
main	pcap-event-pipe/main.c	/^int main(int argc, char* argv[])$/;"	f
__PUB_HEAD_H__	pcap-event-pipe/pub_head.h	2;"	d
